
LaserRainbow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000eee  00000f82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080011c  0080011c  00000f9e  2**0
                  ALLOC
  3 .debug_aranges 00000468  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c36  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007e0e  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002031  00000000  00000000  00009e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000622c  00000000  00000000  0000be7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  000120a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000034c7  00000000  00000000  00012738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000033b4  00000000  00000000  00015bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000558  00000000  00000000  00018fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
   a:	00 00       	nop
   c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
   e:	00 00       	nop
  10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
  12:	00 00       	nop
  14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
  16:	00 00       	nop
  18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
  22:	00 00       	nop
  24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c3       	rjmp	.+1628   	; 0x686 <__vector_10>
  2a:	00 00       	nop
  2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
  32:	00 00       	nop
  34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
  36:	00 00       	nop
  38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
  42:	00 00       	nop
  44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
  46:	00 00       	nop
  48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
  4e:	00 00       	nop
  50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
  52:	00 00       	nop
  54:	90 c0       	rjmp	.+288    	; 0x176 <__vector_21>
  56:	00 00       	nop
  58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
  5e:	00 00       	nop
  60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
  62:	00 00       	nop
  64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
  66:	00 00       	nop
  68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
  6e:	00 00       	nop
  70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
  72:	00 00       	nop
  74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
  76:	00 00       	nop
  78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
  7e:	00 00       	nop
  80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
  82:	00 00       	nop
  84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
  86:	00 00       	nop
  88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
  8e:	00 00       	nop
  90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
  92:	00 00       	nop
  94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
  96:	00 00       	nop
  98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	65 c0       	rjmp	.+202    	; 0x174 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <DeviceDescriptor>:
  ac:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
  be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <LanguageString>:
  fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
 100:	1e 03 43 00 79 00 62 00 6f 00 72 00 67 00 20 00     ..C.y.b.o.r.g. .
 110:	55 00 6e 00 69 00 63 00 6f 00 72 00 6e 00 00 00     U.n.i.c.o.r.n...

00000120 <ProductString>:
 120:	1c 03 4c 00 61 00 73 00 65 00 72 00 20 00 52 00     ..L.a.s.e.r. .R.
 130:	61 00 69 00 6e 00 62 00 6f 00 77 00 00 00           a.i.n.b.o.w...

0000013e <__ctors_end>:
 13e:	11 24       	eor	r1, r1
 140:	1f be       	out	0x3f, r1	; 63
 142:	cf ef       	ldi	r28, 0xFF	; 255
 144:	da e0       	ldi	r29, 0x0A	; 10
 146:	de bf       	out	0x3e, r29	; 62
 148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	ee ee       	ldi	r30, 0xEE	; 238
 152:	fe e0       	ldi	r31, 0x0E	; 14
 154:	02 c0       	rjmp	.+4      	; 0x15a <.do_copy_data_start>

00000156 <.do_copy_data_loop>:
 156:	05 90       	lpm	r0, Z+
 158:	0d 92       	st	X+, r0

0000015a <.do_copy_data_start>:
 15a:	ac 31       	cpi	r26, 0x1C	; 28
 15c:	b1 07       	cpc	r27, r17
 15e:	d9 f7       	brne	.-10     	; 0x156 <.do_copy_data_loop>

00000160 <__do_clear_bss>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	ac e1       	ldi	r26, 0x1C	; 28
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
 168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
 16a:	aa 33       	cpi	r26, 0x3A	; 58
 16c:	b1 07       	cpc	r27, r17
 16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
 170:	4f d0       	rcall	.+158    	; 0x210 <main>
 172:	bb c6       	rjmp	.+3446   	; 0xeea <_exit>

00000174 <__bad_interrupt>:
 174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <__vector_21>:
static FILE USBSerialStream;


/** Interrupt handler for managing the software PWM channels for the LEDs */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
	uint8_t LEDMask = LEDS_ALL_LEDS;

	if (++SoftPWM_Count == 0b00011111)
 184:	80 91 1c 01 	lds	r24, 0x011C
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 1c 01 	sts	0x011C, r24
 18e:	80 91 1c 01 	lds	r24, 0x011C
 192:	8f 31       	cpi	r24, 0x1F	; 31
 194:	11 f4       	brne	.+4      	; 0x19a <__vector_21+0x24>
	  SoftPWM_Count = 0;
 196:	10 92 1c 01 	sts	0x011C, r1

	if (SoftPWM_Count >= SoftPWM_Channel1_Duty)
 19a:	90 91 1c 01 	lds	r25, 0x011C
 19e:	80 91 1d 01 	lds	r24, 0x011D
 1a2:	98 17       	cp	r25, r24
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <__vector_21+0x34>
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <__vector_21+0x36>
 1aa:	92 e0       	ldi	r25, 0x02	; 2
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE  = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
 1ac:	8e b1       	in	r24, 0x0e	; 14
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	98 2b       	or	r25, r24
 1b2:	9e b9       	out	0x0e, r25	; 14

	if (SoftPWM_Count >= SoftPWM_Channel3_Duty)
	  LEDMask &= ~LEDS_LED3;
*/
	LEDs_SetAllLEDs(LEDMask);
}
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	91 e0       	ldi	r25, 0x01	; 1
}
 1c6:	a3 c5       	rjmp	.+2886   	; 0xd0e <CDC_Device_ProcessControlRequest>

000001c8 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 e0       	ldi	r25, 0x01	; 1
}
 1cc:	79 c5       	rjmp	.+2802   	; 0xcc0 <CDC_Device_ConfigureEndpoints>

000001ce <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1ce:	84 b7       	in	r24, 0x34	; 52
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1d4:	88 e1       	ldi	r24, 0x18	; 24
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	80 93 60 00 	sts	0x0060, r24
 1de:	10 92 60 00 	sts	0x0060, r1
 1e2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	20 e8       	ldi	r18, 0x80	; 128
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	20 93 61 00 	sts	0x0061, r18
 1f2:	80 93 61 00 	sts	0x0061, r24
 1f6:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRE  |=  LEDS_ALL_LEDS;
 1f8:	69 9a       	sbi	0x0d, 1	; 13
				PORTE &= ~LEDS_ALL_LEDS;
 1fa:	71 98       	cbi	0x0e, 1	; 14

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 1fc:	27 d2       	rcall	.+1102   	; 0x64c <USB_Init>

	/* Timer Initialization */
	OCR0A  = 100;
 1fe:	84 e6       	ldi	r24, 0x64	; 100
 200:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
 20a:	90 93 6e 00 	sts	0x006E, r25
}
 20e:	08 95       	ret

00000210 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 210:	de df       	rcall	.-68     	; 0x1ce <SetupHardware>

	/* Create a regular blocking character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateBlockingStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	60 e2       	ldi	r22, 0x20	; 32
 218:	71 e0       	ldi	r23, 0x01	; 1
 21a:	a8 d4       	rcall	.+2384   	; 0xb6c <CDC_Device_CreateBlockingStream>

	sei();
 21c:	78 94       	sei

	for (;;)
	{
		/* Read in next LED colour command from the host */
		uint8_t ColourUpdate = fgetc(&USBSerialStream);
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	21 d6       	rcall	.+3138   	; 0xe66 <fgetc>

		/* Top 3 bits select the LED, bottom 5 control the brightness */
		uint8_t Channel = (ColourUpdate & 0b11100000);
 224:	28 2f       	mov	r18, r24
 226:	20 7e       	andi	r18, 0xE0	; 224
		uint8_t Duty    = (ColourUpdate & 0b00011111);
 228:	8f 71       	andi	r24, 0x1F	; 31

		if (Channel & (1 << 5))
 22a:	92 2f       	mov	r25, r18
 22c:	25 ff       	sbrs	r18, 5
 22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x24>
		  SoftPWM_Channel1_Duty = Duty;
 230:	80 93 1d 01 	sts	0x011D, r24

		if (Channel & (1 << 6))
 234:	96 ff       	sbrs	r25, 6
 236:	02 c0       	rjmp	.+4      	; 0x23c <main+0x2c>
		  SoftPWM_Channel2_Duty = Duty;
 238:	80 93 1e 01 	sts	0x011E, r24

		if (Channel & (1 << 7))
 23c:	27 ff       	sbrs	r18, 7
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0x34>
		  SoftPWM_Channel3_Duty = Duty;
 240:	80 93 1f 01 	sts	0x011F, r24

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	d8 d4       	rcall	.+2480   	; 0xbfa <CDC_Device_USBTask>
		USB_USBTask();
 24a:	41 d4       	rcall	.+2178   	; 0xace <USB_USBTask>
 24c:	e8 cf       	rjmp	.-48     	; 0x21e <main+0xe>

0000024e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 24e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 250:	92 30       	cpi	r25, 0x02	; 2
 252:	49 f0       	breq	.+18     	; 0x266 <CALLBACK_USB_GetDescriptor+0x18>
 254:	93 30       	cpi	r25, 0x03	; 3
 256:	61 f0       	breq	.+24     	; 0x270 <CALLBACK_USB_GetDescriptor+0x22>
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	f9 f4       	brne	.+62     	; 0x29a <CALLBACK_USB_GetDescriptor+0x4c>
 25c:	ec ea       	ldi	r30, 0xAC	; 172
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	22 e1       	ldi	r18, 0x12	; 18
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	1e c0       	rjmp	.+60     	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x54>
 266:	ee eb       	ldi	r30, 0xBE	; 190
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	2e e3       	ldi	r18, 0x3E	; 62
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	19 c0       	rjmp	.+50     	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	49 f0       	breq	.+18     	; 0x286 <CALLBACK_USB_GetDescriptor+0x38>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	18 f0       	brcs	.+6      	; 0x27e <CALLBACK_USB_GetDescriptor+0x30>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	79 f4       	brne	.+30     	; 0x29a <CALLBACK_USB_GetDescriptor+0x4c>
 27c:	08 c0       	rjmp	.+16     	; 0x28e <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 27e:	ec ef       	ldi	r30, 0xFC	; 252
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	84 91       	lpm	r24, Z+
 284:	07 c0       	rjmp	.+14     	; 0x294 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 286:	e0 e0       	ldi	r30, 0x00	; 0
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	84 91       	lpm	r24, Z+
 28c:	03 c0       	rjmp	.+6      	; 0x294 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 28e:	e0 e2       	ldi	r30, 0x20	; 32
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	84 91       	lpm	r24, Z+
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x54>
 29a:	e0 e0       	ldi	r30, 0x00	; 0
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2a2:	ed 93       	st	X+, r30
 2a4:	fc 93       	st	X, r31
	return Size;
}
 2a6:	c9 01       	movw	r24, r18
 2a8:	08 95       	ret

000002aa <Endpoint_Write_Control_Stream_LE>:
 2aa:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 2ac:	40 91 38 01 	lds	r20, 0x0138
 2b0:	50 91 39 01 	lds	r21, 0x0139
 2b4:	46 17       	cp	r20, r22
 2b6:	57 07       	cpc	r21, r23
 2b8:	18 f4       	brcc	.+6      	; 0x2c0 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 2ba:	f9 01       	movw	r30, r18
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	44 c0       	rjmp	.+136    	; 0x348 <Endpoint_Write_Control_Stream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 2c0:	61 15       	cp	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	11 f0       	breq	.+4      	; 0x2ca <Endpoint_Write_Control_Stream_LE+0x20>
 2c6:	ab 01       	movw	r20, r22
 2c8:	f8 cf       	rjmp	.-16     	; 0x2ba <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2ca:	80 91 e8 00 	lds	r24, 0x00E8
 2ce:	8e 77       	andi	r24, 0x7E	; 126
 2d0:	80 93 e8 00 	sts	0x00E8, r24
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	f0 cf       	rjmp	.-32     	; 0x2ba <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 2da:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 2dc:	88 23       	and	r24, r24
 2de:	09 f4       	brne	.+2      	; 0x2e2 <Endpoint_Write_Control_Stream_LE+0x38>
 2e0:	44 c0       	rjmp	.+136    	; 0x36a <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 2e2:	85 30       	cpi	r24, 0x05	; 5
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <Endpoint_Write_Control_Stream_LE+0x3e>
 2e6:	43 c0       	rjmp	.+134    	; 0x36e <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 2e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 2ec:	83 ff       	sbrs	r24, 3
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Endpoint_Write_Control_Stream_LE+0x4a>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 2f8:	82 fd       	sbrc	r24, 2
 2fa:	31 c0       	rjmp	.+98     	; 0x35e <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2fc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 300:	80 ff       	sbrs	r24, 0
 302:	22 c0       	rjmp	.+68     	; 0x348 <Endpoint_Write_Control_Stream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 304:	80 91 f3 00 	lds	r24, 0x00F3
 308:	90 91 f2 00 	lds	r25, 0x00F2
 30c:	78 2f       	mov	r23, r24
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	29 2f       	mov	r18, r25
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	26 2b       	or	r18, r22
 316:	37 2b       	or	r19, r23
 318:	07 c0       	rjmp	.+14     	; 0x328 <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 31a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 31c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 320:	41 50       	subi	r20, 0x01	; 1
 322:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 328:	41 15       	cp	r20, r1
 32a:	51 05       	cpc	r21, r1
 32c:	19 f0       	breq	.+6      	; 0x334 <Endpoint_Write_Control_Stream_LE+0x8a>
 32e:	28 30       	cpi	r18, 0x08	; 8
 330:	31 05       	cpc	r19, r1
 332:	98 f3       	brcs	.-26     	; 0x31a <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	28 30       	cpi	r18, 0x08	; 8
 338:	31 05       	cpc	r19, r1
 33a:	09 f4       	brne	.+2      	; 0x33e <Endpoint_Write_Control_Stream_LE+0x94>
 33c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 33e:	80 91 e8 00 	lds	r24, 0x00E8
 342:	8e 77       	andi	r24, 0x7E	; 126
 344:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 348:	41 15       	cp	r20, r1
 34a:	51 05       	cpc	r21, r1
 34c:	31 f6       	brne	.-116    	; 0x2da <Endpoint_Write_Control_Stream_LE+0x30>
 34e:	99 23       	and	r25, r25
 350:	21 f6       	brne	.-120    	; 0x2da <Endpoint_Write_Control_Stream_LE+0x30>
 352:	05 c0       	rjmp	.+10     	; 0x35e <Endpoint_Write_Control_Stream_LE+0xb4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 354:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 356:	88 23       	and	r24, r24
 358:	41 f0       	breq	.+16     	; 0x36a <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 35a:	85 30       	cpi	r24, 0x05	; 5
 35c:	41 f0       	breq	.+16     	; 0x36e <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 35e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 362:	82 ff       	sbrs	r24, 2
 364:	f7 cf       	rjmp	.-18     	; 0x354 <Endpoint_Write_Control_Stream_LE+0xaa>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	08 95       	ret
 36e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 370:	08 95       	ret

00000372 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 372:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 374:	40 91 38 01 	lds	r20, 0x0138
 378:	50 91 39 01 	lds	r21, 0x0139
 37c:	46 17       	cp	r20, r22
 37e:	57 07       	cpc	r21, r23
 380:	18 f4       	brcc	.+6      	; 0x388 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 382:	f9 01       	movw	r30, r18
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	45 c0       	rjmp	.+138    	; 0x412 <Endpoint_Write_Control_PStream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 388:	61 15       	cp	r22, r1
 38a:	71 05       	cpc	r23, r1
 38c:	11 f0       	breq	.+4      	; 0x392 <Endpoint_Write_Control_PStream_LE+0x20>
 38e:	ab 01       	movw	r20, r22
 390:	f8 cf       	rjmp	.-16     	; 0x382 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 392:	80 91 e8 00 	lds	r24, 0x00E8
 396:	8e 77       	andi	r24, 0x7E	; 126
 398:	80 93 e8 00 	sts	0x00E8, r24
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	f0 cf       	rjmp	.-32     	; 0x382 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3a2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3a4:	88 23       	and	r24, r24
 3a6:	09 f4       	brne	.+2      	; 0x3aa <Endpoint_Write_Control_PStream_LE+0x38>
 3a8:	46 c0       	rjmp	.+140    	; 0x436 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3aa:	85 30       	cpi	r24, 0x05	; 5
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <Endpoint_Write_Control_PStream_LE+0x3e>
 3ae:	45 c0       	rjmp	.+138    	; 0x43a <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3b0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 3b4:	83 ff       	sbrs	r24, 3
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Endpoint_Write_Control_PStream_LE+0x4a>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3bc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 3c0:	82 fd       	sbrc	r24, 2
 3c2:	33 c0       	rjmp	.+102    	; 0x42a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3c4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 3c8:	80 ff       	sbrs	r24, 0
 3ca:	23 c0       	rjmp	.+70     	; 0x412 <Endpoint_Write_Control_PStream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 3cc:	80 91 f3 00 	lds	r24, 0x00F3
 3d0:	90 91 f2 00 	lds	r25, 0x00F2
 3d4:	78 2f       	mov	r23, r24
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	29 2f       	mov	r18, r25
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	26 2b       	or	r18, r22
 3de:	37 2b       	or	r19, r23
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <Endpoint_Write_Control_PStream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 3e2:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3e4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 3e8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 3ea:	41 50       	subi	r20, 0x01	; 1
 3ec:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 3ee:	2f 5f       	subi	r18, 0xFF	; 255
 3f0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3f2:	41 15       	cp	r20, r1
 3f4:	51 05       	cpc	r21, r1
 3f6:	19 f0       	breq	.+6      	; 0x3fe <Endpoint_Write_Control_PStream_LE+0x8c>
 3f8:	28 30       	cpi	r18, 0x08	; 8
 3fa:	31 05       	cpc	r19, r1
 3fc:	90 f3       	brcs	.-28     	; 0x3e2 <Endpoint_Write_Control_PStream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	28 30       	cpi	r18, 0x08	; 8
 402:	31 05       	cpc	r19, r1
 404:	09 f4       	brne	.+2      	; 0x408 <Endpoint_Write_Control_PStream_LE+0x96>
 406:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 408:	80 91 e8 00 	lds	r24, 0x00E8
 40c:	8e 77       	andi	r24, 0x7E	; 126
 40e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 412:	41 15       	cp	r20, r1
 414:	51 05       	cpc	r21, r1
 416:	29 f6       	brne	.-118    	; 0x3a2 <Endpoint_Write_Control_PStream_LE+0x30>
 418:	99 23       	and	r25, r25
 41a:	09 f0       	breq	.+2      	; 0x41e <Endpoint_Write_Control_PStream_LE+0xac>
 41c:	c2 cf       	rjmp	.-124    	; 0x3a2 <Endpoint_Write_Control_PStream_LE+0x30>
 41e:	05 c0       	rjmp	.+10     	; 0x42a <Endpoint_Write_Control_PStream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 420:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 422:	88 23       	and	r24, r24
 424:	41 f0       	breq	.+16     	; 0x436 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 426:	85 30       	cpi	r24, 0x05	; 5
 428:	41 f0       	breq	.+16     	; 0x43a <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 42a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 42e:	82 ff       	sbrs	r24, 2
 430:	f7 cf       	rjmp	.-18     	; 0x420 <Endpoint_Write_Control_PStream_LE+0xae>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	08 95       	ret
 43a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 43c:	08 95       	ret

0000043e <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 43e:	38 2f       	mov	r19, r24
 440:	28 2f       	mov	r18, r24
 442:	2e c0       	rjmp	.+92     	; 0x4a0 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 444:	82 2f       	mov	r24, r18
 446:	8f 70       	andi	r24, 0x0F	; 15
 448:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 44c:	23 17       	cp	r18, r19
 44e:	21 f4       	brne	.+8      	; 0x458 <Endpoint_ConfigureEndpoint_Prv+0x1a>
 450:	76 2f       	mov	r23, r22
 452:	94 2f       	mov	r25, r20
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	06 c0       	rjmp	.+12     	; 0x464 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 458:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 45c:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 460:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 464:	91 ff       	sbrs	r25, 1
 466:	1b c0       	rjmp	.+54     	; 0x49e <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 468:	80 91 eb 00 	lds	r24, 0x00EB
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 472:	80 91 ed 00 	lds	r24, 0x00ED
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 47c:	80 91 eb 00 	lds	r24, 0x00EB
 480:	81 60       	ori	r24, 0x01	; 1
 482:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 486:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 48a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 48e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 492:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
 496:	87 fd       	sbrc	r24, 7
 498:	02 c0       	rjmp	.+4      	; 0x49e <Endpoint_ConfigureEndpoint_Prv+0x60>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	27 30       	cpi	r18, 0x07	; 7
 4a2:	80 f2       	brcs	.-96     	; 0x444 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4a4:	3f 70       	andi	r19, 0x0F	; 15
 4a6:	30 93 e9 00 	sts	0x00E9, r19
 4aa:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 4ac:	08 95       	ret

000004ae <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	06 2f       	mov	r16, r22
 4b8:	ec 01       	movw	r28, r24
 4ba:	10 e0       	ldi	r17, 0x00	; 0
 4bc:	2a c0       	rjmp	.+84     	; 0x512 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
 4be:	98 81       	ld	r25, Y
 4c0:	99 23       	and	r25, r25
 4c2:	29 f1       	breq	.+74     	; 0x50e <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 4c4:	6b 81       	ldd	r22, Y+3	; 0x03
 4c6:	e9 81       	ldd	r30, Y+1	; 0x01
 4c8:	fa 81       	ldd	r31, Y+2	; 0x02
 4ca:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 4cc:	89 2f       	mov	r24, r25
 4ce:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 4d0:	87 30       	cpi	r24, 0x07	; 7
 4d2:	18 f5       	brcc	.+70     	; 0x51a <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 4d4:	22 30       	cpi	r18, 0x02	; 2
 4d6:	10 f4       	brcc	.+4      	; 0x4dc <Endpoint_ConfigureEndpointTable+0x2e>
 4d8:	52 e0       	ldi	r21, 0x02	; 2
 4da:	01 c0       	rjmp	.+2      	; 0x4de <Endpoint_ConfigureEndpointTable+0x30>
 4dc:	56 e0       	ldi	r21, 0x06	; 6
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	28 e0       	ldi	r18, 0x08	; 8
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 4e6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 4ec:	2e 17       	cp	r18, r30
 4ee:	3f 07       	cpc	r19, r31
 4f0:	d0 f3       	brcs	.-12     	; 0x4e6 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 4f2:	62 95       	swap	r22
 4f4:	66 0f       	add	r22, r22
 4f6:	66 0f       	add	r22, r22
 4f8:	60 7c       	andi	r22, 0xC0	; 192
 4fa:	99 1f       	adc	r25, r25
 4fc:	99 27       	eor	r25, r25
 4fe:	99 1f       	adc	r25, r25
 500:	69 2b       	or	r22, r25
 502:	42 95       	swap	r20
 504:	40 7f       	andi	r20, 0xF0	; 240
 506:	45 2b       	or	r20, r21
 508:	9a df       	rcall	.-204    	; 0x43e <Endpoint_ConfigureEndpoint_Prv>
 50a:	88 23       	and	r24, r24
 50c:	31 f0       	breq	.+12     	; 0x51a <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 50e:	1f 5f       	subi	r17, 0xFF	; 255
 510:	25 96       	adiw	r28, 0x05	; 5
 512:	10 17       	cp	r17, r16
 514:	a0 f2       	brcs	.-88     	; 0x4be <Endpoint_ConfigureEndpointTable+0x10>
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	01 c0       	rjmp	.+2      	; 0x51c <Endpoint_ConfigureEndpointTable+0x6e>
 51a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret

00000526 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 526:	80 91 32 01 	lds	r24, 0x0132
 52a:	88 23       	and	r24, r24
 52c:	8c f4       	brge	.+34     	; 0x550 <Endpoint_ClearStatusStage+0x2a>
 52e:	03 c0       	rjmp	.+6      	; 0x536 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 530:	8e b3       	in	r24, 0x1e	; 30
 532:	88 23       	and	r24, r24
 534:	b1 f0       	breq	.+44     	; 0x562 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 536:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 53a:	82 ff       	sbrs	r24, 2
 53c:	f9 cf       	rjmp	.-14     	; 0x530 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 53e:	80 91 e8 00 	lds	r24, 0x00E8
 542:	8b 77       	andi	r24, 0x7B	; 123
 544:	80 93 e8 00 	sts	0x00E8, r24
 548:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 54a:	8e b3       	in	r24, 0x1e	; 30
 54c:	88 23       	and	r24, r24
 54e:	49 f0       	breq	.+18     	; 0x562 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 550:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 554:	80 ff       	sbrs	r24, 0
 556:	f9 cf       	rjmp	.-14     	; 0x54a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 558:	80 91 e8 00 	lds	r24, 0x00E8
 55c:	8e 77       	andi	r24, 0x7E	; 126
 55e:	80 93 e8 00 	sts	0x00E8, r24
 562:	08 95       	ret

00000564 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 564:	40 91 e4 00 	lds	r20, 0x00E4
 568:	50 91 e5 00 	lds	r21, 0x00E5
 56c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 56e:	80 91 ec 00 	lds	r24, 0x00EC
 572:	80 ff       	sbrs	r24, 0
 574:	23 c0       	rjmp	.+70     	; 0x5bc <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 576:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 57a:	80 fd       	sbrc	r24, 0
 57c:	1d c0       	rjmp	.+58     	; 0x5b8 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 57e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 580:	88 23       	and	r24, r24
 582:	11 f4       	brne	.+4      	; 0x588 <Endpoint_WaitUntilReady+0x24>
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 588:	85 30       	cpi	r24, 0x05	; 5
 58a:	11 f4       	brne	.+4      	; 0x590 <Endpoint_WaitUntilReady+0x2c>
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 590:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 594:	85 ff       	sbrs	r24, 5
 596:	02 c0       	rjmp	.+4      	; 0x59c <Endpoint_WaitUntilReady+0x38>
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	08 95       	ret
 59c:	80 91 e4 00 	lds	r24, 0x00E4
 5a0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 5a4:	84 17       	cp	r24, r20
 5a6:	95 07       	cpc	r25, r21
 5a8:	11 f3       	breq	.-60     	; 0x56e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 5aa:	22 23       	and	r18, r18
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <Endpoint_WaitUntilReady+0x4e>
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	08 95       	ret
 5b2:	21 50       	subi	r18, 0x01	; 1
 5b4:	ac 01       	movw	r20, r24
 5b6:	db cf       	rjmp	.-74     	; 0x56e <Endpoint_WaitUntilReady+0xa>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 5ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5bc:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5c0:	82 ff       	sbrs	r24, 2
 5c2:	dd cf       	rjmp	.-70     	; 0x57e <Endpoint_WaitUntilReady+0x1a>
 5c4:	f9 cf       	rjmp	.-14     	; 0x5b8 <Endpoint_WaitUntilReady+0x54>

000005c6 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 5c6:	ef 92       	push	r14
 5c8:	ff 92       	push	r15
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5ce:	4e d0       	rcall	.+156    	; 0x66c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5d0:	55 d0       	rcall	.+170    	; 0x67c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5d2:	08 ed       	ldi	r16, 0xD8	; 216
 5d4:	10 e0       	ldi	r17, 0x00	; 0
 5d6:	f8 01       	movw	r30, r16
 5d8:	80 81       	ld	r24, Z
 5da:	8f 77       	andi	r24, 0x7F	; 127
 5dc:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 5de:	80 81       	ld	r24, Z
 5e0:	80 68       	ori	r24, 0x80	; 128
 5e2:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5e4:	80 81       	ld	r24, Z
 5e6:	8f 7d       	andi	r24, 0xDF	; 223
 5e8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5ea:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5ec:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 5ee:	10 92 2e 01 	sts	0x012E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5f2:	10 92 30 01 	sts	0x0130, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5f6:	10 92 2f 01 	sts	0x012F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 5fa:	80 ee       	ldi	r24, 0xE0	; 224
 5fc:	e8 2e       	mov	r14, r24
 5fe:	f1 2c       	mov	r15, r1
 600:	f7 01       	movw	r30, r14
 602:	80 81       	ld	r24, Z
 604:	8b 7f       	andi	r24, 0xFB	; 251
 606:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 608:	f8 01       	movw	r30, r16
 60a:	80 81       	ld	r24, Z
 60c:	81 60       	ori	r24, 0x01	; 1
 60e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	42 e0       	ldi	r20, 0x02	; 2
 616:	13 df       	rcall	.-474    	; 0x43e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 618:	e1 ee       	ldi	r30, 0xE1	; 225
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	8e 7f       	andi	r24, 0xFE	; 254
 620:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 622:	e2 ee       	ldi	r30, 0xE2	; 226
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	81 60       	ori	r24, 0x01	; 1
 62a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 62c:	80 81       	ld	r24, Z
 62e:	88 60       	ori	r24, 0x08	; 8
 630:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 632:	f7 01       	movw	r30, r14
 634:	80 81       	ld	r24, Z
 636:	8e 7f       	andi	r24, 0xFE	; 254
 638:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 63a:	f8 01       	movw	r30, r16
 63c:	80 81       	ld	r24, Z
 63e:	80 61       	ori	r24, 0x10	; 16
 640:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	08 95       	ret

0000064c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 64c:	e8 ed       	ldi	r30, 0xD8	; 216
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	8f 7e       	andi	r24, 0xEF	; 239
 654:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 656:	e7 ed       	ldi	r30, 0xD7	; 215
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	81 60       	ori	r24, 0x01	; 1
 65e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	80 93 31 01 	sts	0x0131, r24

	USB_ResetInterface();
}
 66a:	ad cf       	rjmp	.-166    	; 0x5c6 <USB_ResetInterface>

0000066c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 66c:	e8 ed       	ldi	r30, 0xD8	; 216
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	8e 7f       	andi	r24, 0xFE	; 254
 674:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 676:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 67a:	08 95       	ret

0000067c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 67c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 680:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 684:	08 95       	ret

00000686 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	2f 93       	push	r18
 692:	3f 93       	push	r19
 694:	4f 93       	push	r20
 696:	5f 93       	push	r21
 698:	6f 93       	push	r22
 69a:	7f 93       	push	r23
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	af 93       	push	r26
 6a2:	bf 93       	push	r27
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 6a8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6ac:	82 ff       	sbrs	r24, 2
 6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 6b0:	80 91 e2 00 	lds	r24, 0x00E2
 6b4:	82 ff       	sbrs	r24, 2
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6b8:	80 91 e1 00 	lds	r24, 0x00E1
 6bc:	8b 7f       	andi	r24, 0xFB	; 251
 6be:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6c2:	04 d2       	rcall	.+1032   	; 0xacc <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6c4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6c8:	80 ff       	sbrs	r24, 0
 6ca:	1a c0       	rjmp	.+52     	; 0x700 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6cc:	80 91 d8 00 	lds	r24, 0x00D8
 6d0:	80 ff       	sbrs	r24, 0
 6d2:	16 c0       	rjmp	.+44     	; 0x700 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6d4:	80 91 da 00 	lds	r24, 0x00DA
 6d8:	8e 7f       	andi	r24, 0xFE	; 254
 6da:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6de:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6e2:	80 ff       	sbrs	r24, 0
 6e4:	0a c0       	rjmp	.+20     	; 0x6fa <__vector_10+0x74>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6e6:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6ec:	09 b4       	in	r0, 0x29	; 41
 6ee:	00 fe       	sbrs	r0, 0
 6f0:	fd cf       	rjmp	.-6      	; 0x6ec <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
 6f6:	ea d1       	rcall	.+980    	; 0xacc <USB_Event_Stub>
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <__vector_10+0x7a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6fa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 6fc:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
 6fe:	e6 d1       	rcall	.+972    	; 0xacc <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 700:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 704:	80 ff       	sbrs	r24, 0
 706:	17 c0       	rjmp	.+46     	; 0x736 <__vector_10+0xb0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 708:	80 91 e2 00 	lds	r24, 0x00E2
 70c:	80 ff       	sbrs	r24, 0
 70e:	13 c0       	rjmp	.+38     	; 0x736 <__vector_10+0xb0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 710:	80 91 e2 00 	lds	r24, 0x00E2
 714:	8e 7f       	andi	r24, 0xFE	; 254
 716:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 71a:	80 91 e2 00 	lds	r24, 0x00E2
 71e:	80 61       	ori	r24, 0x10	; 16
 720:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 724:	80 91 d8 00 	lds	r24, 0x00D8
 728:	80 62       	ori	r24, 0x20	; 32
 72a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 72e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 730:	85 e0       	ldi	r24, 0x05	; 5
 732:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
 734:	cb d1       	rcall	.+918    	; 0xacc <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 736:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 73a:	84 ff       	sbrs	r24, 4
 73c:	2b c0       	rjmp	.+86     	; 0x794 <__vector_10+0x10e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 73e:	80 91 e2 00 	lds	r24, 0x00E2
 742:	84 ff       	sbrs	r24, 4
 744:	27 c0       	rjmp	.+78     	; 0x794 <__vector_10+0x10e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 746:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 74c:	09 b4       	in	r0, 0x29	; 41
 74e:	00 fe       	sbrs	r0, 0
 750:	fd cf       	rjmp	.-6      	; 0x74c <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 752:	80 91 d8 00 	lds	r24, 0x00D8
 756:	8f 7d       	andi	r24, 0xDF	; 223
 758:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 75c:	80 91 e1 00 	lds	r24, 0x00E1
 760:	8f 7e       	andi	r24, 0xEF	; 239
 762:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 766:	80 91 e2 00 	lds	r24, 0x00E2
 76a:	8f 7e       	andi	r24, 0xEF	; 239
 76c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 770:	80 91 e2 00 	lds	r24, 0x00E2
 774:	81 60       	ori	r24, 0x01	; 1
 776:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 77a:	80 91 2e 01 	lds	r24, 0x012E
 77e:	88 23       	and	r24, r24
 780:	31 f4       	brne	.+12     	; 0x78e <__vector_10+0x108>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 782:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 786:	87 fd       	sbrc	r24, 7
 788:	02 c0       	rjmp	.+4      	; 0x78e <__vector_10+0x108>
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	01 c0       	rjmp	.+2      	; 0x790 <__vector_10+0x10a>
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 792:	9c d1       	rcall	.+824    	; 0xacc <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 794:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 798:	83 ff       	sbrs	r24, 3
 79a:	21 c0       	rjmp	.+66     	; 0x7de <__vector_10+0x158>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 79c:	80 91 e2 00 	lds	r24, 0x00E2
 7a0:	83 ff       	sbrs	r24, 3
 7a2:	1d c0       	rjmp	.+58     	; 0x7de <__vector_10+0x158>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7a4:	80 91 e1 00 	lds	r24, 0x00E1
 7a8:	87 7f       	andi	r24, 0xF7	; 247
 7aa:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 7b2:	10 92 2e 01 	sts	0x012E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7b6:	80 91 e1 00 	lds	r24, 0x00E1
 7ba:	8e 7f       	andi	r24, 0xFE	; 254
 7bc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7c0:	80 91 e2 00 	lds	r24, 0x00E2
 7c4:	8e 7f       	andi	r24, 0xFE	; 254
 7c6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7ca:	80 91 e2 00 	lds	r24, 0x00E2
 7ce:	80 61       	ori	r24, 0x10	; 16
 7d0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	42 e0       	ldi	r20, 0x02	; 2
 7da:	31 de       	rcall	.-926    	; 0x43e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7dc:	77 d1       	rcall	.+750    	; 0xacc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	bf 91       	pop	r27
 7e4:	af 91       	pop	r26
 7e6:	9f 91       	pop	r25
 7e8:	8f 91       	pop	r24
 7ea:	7f 91       	pop	r23
 7ec:	6f 91       	pop	r22
 7ee:	5f 91       	pop	r21
 7f0:	4f 91       	pop	r20
 7f2:	3f 91       	pop	r19
 7f4:	2f 91       	pop	r18
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 800:	1f 93       	push	r17
 802:	df 93       	push	r29
 804:	cf 93       	push	r28
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	ac 97       	sbiw	r28, 0x2c	; 44
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	de bf       	out	0x3e, r29	; 62
 812:	0f be       	out	0x3f, r0	; 63
 814:	cd bf       	out	0x3d, r28	; 61
 816:	e2 e3       	ldi	r30, 0x32	; 50
 818:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 81a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 81e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 820:	21 e0       	ldi	r18, 0x01	; 1
 822:	ea 33       	cpi	r30, 0x3A	; 58
 824:	f2 07       	cpc	r31, r18
 826:	c9 f7       	brne	.-14     	; 0x81a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 828:	cc dc       	rcall	.-1640   	; 0x1c2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 82a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 82e:	83 ff       	sbrs	r24, 3
 830:	35 c1       	rjmp	.+618    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 832:	80 91 32 01 	lds	r24, 0x0132

		switch (USB_ControlRequest.bRequest)
 836:	30 91 33 01 	lds	r19, 0x0133
 83a:	35 30       	cpi	r19, 0x05	; 5
 83c:	09 f4       	brne	.+2      	; 0x840 <USB_Device_ProcessControlRequest+0x40>
 83e:	87 c0       	rjmp	.+270    	; 0x94e <USB_Device_ProcessControlRequest+0x14e>
 840:	36 30       	cpi	r19, 0x06	; 6
 842:	40 f4       	brcc	.+16     	; 0x854 <USB_Device_ProcessControlRequest+0x54>
 844:	31 30       	cpi	r19, 0x01	; 1
 846:	c9 f1       	breq	.+114    	; 0x8ba <USB_Device_ProcessControlRequest+0xba>
 848:	31 30       	cpi	r19, 0x01	; 1
 84a:	70 f0       	brcs	.+28     	; 0x868 <USB_Device_ProcessControlRequest+0x68>
 84c:	33 30       	cpi	r19, 0x03	; 3
 84e:	09 f0       	breq	.+2      	; 0x852 <USB_Device_ProcessControlRequest+0x52>
 850:	25 c1       	rjmp	.+586    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
 852:	33 c0       	rjmp	.+102    	; 0x8ba <USB_Device_ProcessControlRequest+0xba>
 854:	38 30       	cpi	r19, 0x08	; 8
 856:	09 f4       	brne	.+2      	; 0x85a <USB_Device_ProcessControlRequest+0x5a>
 858:	f4 c0       	rjmp	.+488    	; 0xa42 <USB_Device_ProcessControlRequest+0x242>
 85a:	39 30       	cpi	r19, 0x09	; 9
 85c:	09 f4       	brne	.+2      	; 0x860 <USB_Device_ProcessControlRequest+0x60>
 85e:	03 c1       	rjmp	.+518    	; 0xa66 <USB_Device_ProcessControlRequest+0x266>
 860:	36 30       	cpi	r19, 0x06	; 6
 862:	09 f0       	breq	.+2      	; 0x866 <USB_Device_ProcessControlRequest+0x66>
 864:	1b c1       	rjmp	.+566    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
 866:	95 c0       	rjmp	.+298    	; 0x992 <USB_Device_ProcessControlRequest+0x192>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 868:	80 38       	cpi	r24, 0x80	; 128
 86a:	21 f0       	breq	.+8      	; 0x874 <USB_Device_ProcessControlRequest+0x74>
 86c:	82 38       	cpi	r24, 0x82	; 130
 86e:	09 f0       	breq	.+2      	; 0x872 <USB_Device_ProcessControlRequest+0x72>
 870:	15 c1       	rjmp	.+554    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
 872:	08 c0       	rjmp	.+16     	; 0x884 <USB_Device_ProcessControlRequest+0x84>
 874:	90 91 2f 01 	lds	r25, 0x012F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 878:	80 91 30 01 	lds	r24, 0x0130
 87c:	88 23       	and	r24, r24
 87e:	99 f0       	breq	.+38     	; 0x8a6 <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 880:	92 60       	ori	r25, 0x02	; 2
 882:	11 c0       	rjmp	.+34     	; 0x8a6 <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 884:	80 91 36 01 	lds	r24, 0x0136
 888:	8f 70       	andi	r24, 0x0F	; 15
 88a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 88e:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	25 e0       	ldi	r18, 0x05	; 5
 896:	96 95       	lsr	r25
 898:	87 95       	ror	r24
 89a:	2a 95       	dec	r18
 89c:	e1 f7       	brne	.-8      	; 0x896 <USB_Device_ProcessControlRequest+0x96>
 89e:	98 2f       	mov	r25, r24
 8a0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8a2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8a6:	80 91 e8 00 	lds	r24, 0x00E8
 8aa:	87 7f       	andi	r24, 0xF7	; 247
 8ac:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 8b0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 8b4:	10 92 f1 00 	sts	0x00F1, r1
 8b8:	cf c0       	rjmp	.+414    	; 0xa58 <USB_Device_ProcessControlRequest+0x258>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8ba:	88 23       	and	r24, r24
 8bc:	19 f0       	breq	.+6      	; 0x8c4 <USB_Device_ProcessControlRequest+0xc4>
 8be:	82 30       	cpi	r24, 0x02	; 2
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <USB_Device_ProcessControlRequest+0xc4>
 8c2:	ec c0       	rjmp	.+472    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	8f 71       	andi	r24, 0x1F	; 31
 8c8:	90 70       	andi	r25, 0x00	; 0
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	21 f0       	breq	.+8      	; 0x8d6 <USB_Device_ProcessControlRequest+0xd6>
 8ce:	02 97       	sbiw	r24, 0x02	; 2
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <USB_Device_ProcessControlRequest+0xd4>
 8d2:	e4 c0       	rjmp	.+456    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
 8d4:	0c c0       	rjmp	.+24     	; 0x8ee <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 8d6:	80 91 34 01 	lds	r24, 0x0134
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <USB_Device_ProcessControlRequest+0xe0>
 8de:	de c0       	rjmp	.+444    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8e0:	10 92 30 01 	sts	0x0130, r1
 8e4:	33 30       	cpi	r19, 0x03	; 3
 8e6:	69 f5       	brne	.+90     	; 0x942 <USB_Device_ProcessControlRequest+0x142>
 8e8:	80 93 30 01 	sts	0x0130, r24
 8ec:	2a c0       	rjmp	.+84     	; 0x942 <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8ee:	80 91 34 01 	lds	r24, 0x0134
 8f2:	88 23       	and	r24, r24
 8f4:	31 f5       	brne	.+76     	; 0x942 <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8f6:	20 91 36 01 	lds	r18, 0x0136
 8fa:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 8fc:	09 f4       	brne	.+2      	; 0x900 <USB_Device_ProcessControlRequest+0x100>
 8fe:	ce c0       	rjmp	.+412    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 900:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 904:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 908:	80 ff       	sbrs	r24, 0
 90a:	1b c0       	rjmp	.+54     	; 0x942 <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 90c:	33 30       	cpi	r19, 0x03	; 3
 90e:	21 f4       	brne	.+8      	; 0x918 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 910:	80 91 eb 00 	lds	r24, 0x00EB
 914:	80 62       	ori	r24, 0x20	; 32
 916:	13 c0       	rjmp	.+38     	; 0x93e <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 918:	80 91 eb 00 	lds	r24, 0x00EB
 91c:	80 61       	ori	r24, 0x10	; 16
 91e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <USB_Device_ProcessControlRequest+0x12c>
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	2a 95       	dec	r18
 92e:	e2 f7       	brpl	.-8      	; 0x928 <USB_Device_ProcessControlRequest+0x128>
 930:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 934:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 938:	80 91 eb 00 	lds	r24, 0x00EB
 93c:	88 60       	ori	r24, 0x08	; 8
 93e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 942:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 946:	80 91 e8 00 	lds	r24, 0x00E8
 94a:	87 7f       	andi	r24, 0xF7	; 247
 94c:	88 c0       	rjmp	.+272    	; 0xa5e <USB_Device_ProcessControlRequest+0x25e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 94e:	88 23       	and	r24, r24
 950:	09 f0       	breq	.+2      	; 0x954 <USB_Device_ProcessControlRequest+0x154>
 952:	a4 c0       	rjmp	.+328    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 954:	10 91 34 01 	lds	r17, 0x0134
 958:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 95a:	80 91 e3 00 	lds	r24, 0x00E3
 95e:	80 78       	andi	r24, 0x80	; 128
 960:	81 2b       	or	r24, r17
 962:	80 93 e3 00 	sts	0x00E3, r24
 966:	80 91 e8 00 	lds	r24, 0x00E8
 96a:	87 7f       	andi	r24, 0xF7	; 247
 96c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 970:	da dd       	rcall	.-1100   	; 0x526 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 972:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 976:	80 ff       	sbrs	r24, 0
 978:	fc cf       	rjmp	.-8      	; 0x972 <USB_Device_ProcessControlRequest+0x172>
			}

			static inline void USB_Device_EnableDeviceAddress(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(void)
			{
				  UDADDR |= (1 << ADDEN);
 97a:	80 91 e3 00 	lds	r24, 0x00E3
 97e:	80 68       	ori	r24, 0x80	; 128
 980:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress();

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 984:	11 23       	and	r17, r17
 986:	11 f4       	brne	.+4      	; 0x98c <USB_Device_ProcessControlRequest+0x18c>
 988:	82 e0       	ldi	r24, 0x02	; 2
 98a:	01 c0       	rjmp	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x18e>
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	8e bb       	out	0x1e, r24	; 30
 990:	85 c0       	rjmp	.+266    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 992:	80 58       	subi	r24, 0x80	; 128
 994:	82 30       	cpi	r24, 0x02	; 2
 996:	08 f0       	brcs	.+2      	; 0x99a <USB_Device_ProcessControlRequest+0x19a>
 998:	81 c0       	rjmp	.+258    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 99a:	80 91 34 01 	lds	r24, 0x0134
 99e:	90 91 35 01 	lds	r25, 0x0135
 9a2:	23 e0       	ldi	r18, 0x03	; 3
 9a4:	8c 3d       	cpi	r24, 0xDC	; 220
 9a6:	92 07       	cpc	r25, r18
 9a8:	09 f0       	breq	.+2      	; 0x9ac <USB_Device_ProcessControlRequest+0x1ac>
 9aa:	33 c0       	rjmp	.+102    	; 0xa12 <USB_Device_ProcessControlRequest+0x212>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 9ac:	83 e0       	ldi	r24, 0x03	; 3
 9ae:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 9b0:	8a e2       	ldi	r24, 0x2A	; 42
 9b2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 9b4:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 9b6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 9b8:	de 01       	movw	r26, r28
 9ba:	15 96       	adiw	r26, 0x05	; 5
 9bc:	6e e0       	ldi	r22, 0x0E	; 14
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9c2:	11 e2       	ldi	r17, 0x21	; 33
 9c4:	e6 2f       	mov	r30, r22
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	10 93 57 00 	sts	0x0057, r17
 9cc:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 9ce:	40 ff       	sbrs	r20, 0
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <USB_Device_ProcessControlRequest+0x1d8>
					{
						SerialByte >>= 4;
 9d2:	82 95       	swap	r24
 9d4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 9d6:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 9d8:	8f 70       	andi	r24, 0x0F	; 15
 9da:	28 2f       	mov	r18, r24
 9dc:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 9de:	8a 30       	cpi	r24, 0x0A	; 10
 9e0:	18 f0       	brcs	.+6      	; 0x9e8 <USB_Device_ProcessControlRequest+0x1e8>
 9e2:	c9 01       	movw	r24, r18
 9e4:	c7 96       	adiw	r24, 0x37	; 55
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <USB_Device_ProcessControlRequest+0x1ec>
 9e8:	c9 01       	movw	r24, r18
 9ea:	c0 96       	adiw	r24, 0x30	; 48
 9ec:	8d 93       	st	X+, r24
 9ee:	9d 93       	st	X+, r25
 9f0:	4f 5f       	subi	r20, 0xFF	; 255
 9f2:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9f4:	44 31       	cpi	r20, 0x14	; 20
 9f6:	51 05       	cpc	r21, r1
 9f8:	29 f7       	brne	.-54     	; 0x9c4 <USB_Device_ProcessControlRequest+0x1c4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 9fa:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9fc:	80 91 e8 00 	lds	r24, 0x00E8
 a00:	87 7f       	andi	r24, 0xF7	; 247
 a02:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a06:	ce 01       	movw	r24, r28
 a08:	03 96       	adiw	r24, 0x03	; 3
 a0a:	6a e2       	ldi	r22, 0x2A	; 42
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	4d dc       	rcall	.-1894   	; 0x2aa <Endpoint_Write_Control_Stream_LE>
 a10:	12 c0       	rjmp	.+36     	; 0xa36 <USB_Device_ProcessControlRequest+0x236>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a12:	60 91 36 01 	lds	r22, 0x0136
 a16:	ae 01       	movw	r20, r28
 a18:	4f 5f       	subi	r20, 0xFF	; 255
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	18 dc       	rcall	.-2000   	; 0x24e <CALLBACK_USB_GetDescriptor>
 a1e:	bc 01       	movw	r22, r24
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	09 f4       	brne	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0x226>
 a24:	3b c0       	rjmp	.+118    	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
 a26:	80 91 e8 00 	lds	r24, 0x00E8
 a2a:	87 7f       	andi	r24, 0xF7	; 247
 a2c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	9a 81       	ldd	r25, Y+2	; 0x02
 a34:	9e dc       	rcall	.-1732   	; 0x372 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a36:	80 91 e8 00 	lds	r24, 0x00E8
 a3a:	8b 77       	andi	r24, 0x7B	; 123
 a3c:	80 93 e8 00 	sts	0x00E8, r24
 a40:	2d c0       	rjmp	.+90     	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a42:	80 38       	cpi	r24, 0x80	; 128
 a44:	59 f5       	brne	.+86     	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a46:	80 91 e8 00 	lds	r24, 0x00E8
 a4a:	87 7f       	andi	r24, 0xF7	; 247
 a4c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 a50:	80 91 2e 01 	lds	r24, 0x012E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a54:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a58:	80 91 e8 00 	lds	r24, 0x00E8
 a5c:	8e 77       	andi	r24, 0x7E	; 126
 a5e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a62:	61 dd       	rcall	.-1342   	; 0x526 <Endpoint_ClearStatusStage>
 a64:	1b c0       	rjmp	.+54     	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a66:	88 23       	and	r24, r24
 a68:	c9 f4       	brne	.+50     	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a6a:	90 91 34 01 	lds	r25, 0x0134
 a6e:	92 30       	cpi	r25, 0x02	; 2
 a70:	a8 f4       	brcc	.+42     	; 0xa9c <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a72:	80 91 e8 00 	lds	r24, 0x00E8
 a76:	87 7f       	andi	r24, 0xF7	; 247
 a78:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a7c:	90 93 2e 01 	sts	0x012E, r25

	Endpoint_ClearStatusStage();
 a80:	52 dd       	rcall	.-1372   	; 0x526 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 a82:	80 91 2e 01 	lds	r24, 0x012E
 a86:	88 23       	and	r24, r24
 a88:	31 f4       	brne	.+12     	; 0xa96 <USB_Device_ProcessControlRequest+0x296>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a8a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a8e:	87 fd       	sbrc	r24, 7
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <USB_Device_ProcessControlRequest+0x296>
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x298>
 a96:	84 e0       	ldi	r24, 0x04	; 4
 a98:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 a9a:	96 db       	rcall	.-2260   	; 0x1c8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a9c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 aa0:	83 ff       	sbrs	r24, 3
 aa2:	0a c0       	rjmp	.+20     	; 0xab8 <USB_Device_ProcessControlRequest+0x2b8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 aa4:	80 91 eb 00 	lds	r24, 0x00EB
 aa8:	80 62       	ori	r24, 0x20	; 32
 aaa:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aae:	80 91 e8 00 	lds	r24, 0x00E8
 ab2:	87 7f       	andi	r24, 0xF7	; 247
 ab4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 ab8:	ac 96       	adiw	r28, 0x2c	; 44
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	cf 91       	pop	r28
 ac6:	df 91       	pop	r29
 ac8:	1f 91       	pop	r17
 aca:	08 95       	ret

00000acc <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
 acc:	08 95       	ret

00000ace <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ace:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 ad0:	8e b3       	in	r24, 0x1e	; 30
 ad2:	88 23       	and	r24, r24
 ad4:	71 f0       	breq	.+28     	; 0xaf2 <USB_USBTask+0x24>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ad6:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ada:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ade:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ae2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ae6:	83 ff       	sbrs	r24, 3
 ae8:	01 c0       	rjmp	.+2      	; 0xaec <USB_USBTask+0x1e>
	  USB_Device_ProcessControlRequest();
 aea:	8a de       	rcall	.-748    	; 0x800 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aec:	1f 70       	andi	r17, 0x0F	; 15
 aee:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 af2:	1f 91       	pop	r17
 af4:	08 95       	ret

00000af6 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 af6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 af8:	8e b3       	in	r24, 0x1e	; 30
 afa:	84 30       	cpi	r24, 0x04	; 4
 afc:	99 f5       	brne	.+102    	; 0xb64 <__stack+0x65>
 afe:	84 89       	ldd	r24, Z+20	; 0x14
 b00:	95 89       	ldd	r25, Z+21	; 0x15
 b02:	a6 89       	ldd	r26, Z+22	; 0x16
 b04:	b7 89       	ldd	r27, Z+23	; 0x17
 b06:	00 97       	sbiw	r24, 0x00	; 0
 b08:	a1 05       	cpc	r26, r1
 b0a:	b1 05       	cpc	r27, r1
 b0c:	59 f1       	breq	.+86     	; 0xb64 <__stack+0x65>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b0e:	86 81       	ldd	r24, Z+6	; 0x06
 b10:	8f 70       	andi	r24, 0x0F	; 15
 b12:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b16:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 b1a:	82 ff       	sbrs	r24, 2
 b1c:	23 c0       	rjmp	.+70     	; 0xb64 <__stack+0x65>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 b1e:	40 91 f3 00 	lds	r20, 0x00F3
 b22:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 b26:	94 2f       	mov	r25, r20
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	30 e0       	ldi	r19, 0x00	; 0
 b2c:	82 2b       	or	r24, r18
 b2e:	93 2b       	or	r25, r19
 b30:	89 2b       	or	r24, r25
 b32:	19 f4       	brne	.+6      	; 0xb3a <__stack+0x3b>
 b34:	6f ef       	ldi	r22, 0xFF	; 255
 b36:	7f ef       	ldi	r23, 0xFF	; 255
 b38:	04 c0       	rjmp	.+8      	; 0xb42 <__stack+0x43>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b3a:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 b3e:	68 2f       	mov	r22, r24
 b40:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 b42:	40 91 f3 00 	lds	r20, 0x00F3
 b46:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
 b4a:	94 2f       	mov	r25, r20
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	82 2b       	or	r24, r18
 b52:	93 2b       	or	r25, r19
 b54:	89 2b       	or	r24, r25
 b56:	41 f4       	brne	.+16     	; 0xb68 <__stack+0x69>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b58:	80 91 e8 00 	lds	r24, 0x00E8
 b5c:	8b 77       	andi	r24, 0x7B	; 123
 b5e:	80 93 e8 00 	sts	0x00E8, r24
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <__stack+0x69>
 b64:	6f ef       	ldi	r22, 0xFF	; 255
 b66:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 b68:	cb 01       	movw	r24, r22
 b6a:	08 95       	ret

00000b6c <CDC_Device_CreateBlockingStream>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
 b6c:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
 b6e:	2e e0       	ldi	r18, 0x0E	; 14
 b70:	db 01       	movw	r26, r22
 b72:	1d 92       	st	X+, r1
 b74:	2a 95       	dec	r18
 b76:	e9 f7       	brne	.-6      	; 0xb72 <CDC_Device_CreateBlockingStream+0x6>
 b78:	23 e0       	ldi	r18, 0x03	; 3
 b7a:	23 83       	std	Z+3, r18	; 0x03
 b7c:	21 e5       	ldi	r18, 0x51	; 81
 b7e:	36 e0       	ldi	r19, 0x06	; 6
 b80:	31 87       	std	Z+9, r19	; 0x09
 b82:	20 87       	std	Z+8, r18	; 0x08
 b84:	24 e1       	ldi	r18, 0x14	; 20
 b86:	36 e0       	ldi	r19, 0x06	; 6
 b88:	33 87       	std	Z+11, r19	; 0x0b
 b8a:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 b8c:	95 87       	std	Z+13, r25	; 0x0d
 b8e:	84 87       	std	Z+12, r24	; 0x0c
}
 b90:	08 95       	ret

00000b92 <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
 b92:	08 95       	ret

00000b94 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b94:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b96:	8e b3       	in	r24, 0x1e	; 30
 b98:	84 30       	cpi	r24, 0x04	; 4
 b9a:	51 f5       	brne	.+84     	; 0xbf0 <CDC_Device_Flush+0x5c>
 b9c:	84 89       	ldd	r24, Z+20	; 0x14
 b9e:	95 89       	ldd	r25, Z+21	; 0x15
 ba0:	a6 89       	ldd	r26, Z+22	; 0x16
 ba2:	b7 89       	ldd	r27, Z+23	; 0x17
 ba4:	00 97       	sbiw	r24, 0x00	; 0
 ba6:	a1 05       	cpc	r26, r1
 ba8:	b1 05       	cpc	r27, r1
 baa:	11 f1       	breq	.+68     	; 0xbf0 <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bac:	81 81       	ldd	r24, Z+1	; 0x01
 bae:	8f 70       	andi	r24, 0x0F	; 15
 bb0:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 bb4:	40 91 f3 00 	lds	r20, 0x00F3
 bb8:	20 91 f2 00 	lds	r18, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 bbc:	94 2f       	mov	r25, r20
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	82 2b       	or	r24, r18
 bc4:	93 2b       	or	r25, r19
 bc6:	89 2b       	or	r24, r25
 bc8:	a9 f0       	breq	.+42     	; 0xbf4 <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 bca:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bce:	80 91 e8 00 	lds	r24, 0x00E8
 bd2:	8e 77       	andi	r24, 0x7E	; 126
 bd4:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 bd8:	95 fd       	sbrc	r25, 5
 bda:	0c c0       	rjmp	.+24     	; 0xbf4 <CDC_Device_Flush+0x60>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 bdc:	c3 dc       	rcall	.-1658   	; 0x564 <Endpoint_WaitUntilReady>
 bde:	98 2f       	mov	r25, r24
 be0:	88 23       	and	r24, r24
 be2:	49 f4       	brne	.+18     	; 0xbf6 <CDC_Device_Flush+0x62>
 be4:	80 91 e8 00 	lds	r24, 0x00E8
 be8:	8e 77       	andi	r24, 0x7E	; 126
 bea:	80 93 e8 00 	sts	0x00E8, r24
 bee:	03 c0       	rjmp	.+6      	; 0xbf6 <CDC_Device_Flush+0x62>
 bf0:	92 e0       	ldi	r25, 0x02	; 2
 bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <CDC_Device_Flush+0x62>
 bf4:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 bf6:	89 2f       	mov	r24, r25
 bf8:	08 95       	ret

00000bfa <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 bfa:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bfc:	8e b3       	in	r24, 0x1e	; 30
 bfe:	84 30       	cpi	r24, 0x04	; 4
 c00:	91 f4       	brne	.+36     	; 0xc26 <CDC_Device_USBTask+0x2c>
 c02:	84 89       	ldd	r24, Z+20	; 0x14
 c04:	95 89       	ldd	r25, Z+21	; 0x15
 c06:	a6 89       	ldd	r26, Z+22	; 0x16
 c08:	b7 89       	ldd	r27, Z+23	; 0x17
 c0a:	00 97       	sbiw	r24, 0x00	; 0
 c0c:	a1 05       	cpc	r26, r1
 c0e:	b1 05       	cpc	r27, r1
 c10:	51 f0       	breq	.+20     	; 0xc26 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c12:	81 81       	ldd	r24, Z+1	; 0x01
 c14:	8f 70       	andi	r24, 0x0F	; 15
 c16:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c1a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
 c1e:	80 ff       	sbrs	r24, 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
 c22:	cf 01       	movw	r24, r30
 c24:	b7 cf       	rjmp	.-146    	; 0xb94 <CDC_Device_Flush>
 c26:	08 95       	ret

00000c28 <CDC_Device_getchar_Blocking>:

	return ReceivedByte;
}

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
 c28:	cf 93       	push	r28
 c2a:	df 93       	push	r29
 c2c:	ec 01       	movw	r28, r24
 c2e:	0a c0       	rjmp	.+20     	; 0xc44 <CDC_Device_getchar_Blocking+0x1c>
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 c30:	8e b3       	in	r24, 0x1e	; 30
 c32:	88 23       	and	r24, r24
 c34:	19 f4       	brne	.+6      	; 0xc3c <CDC_Device_getchar_Blocking+0x14>
 c36:	2e ef       	ldi	r18, 0xFE	; 254
 c38:	3f ef       	ldi	r19, 0xFF	; 255
 c3a:	0a c0       	rjmp	.+20     	; 0xc50 <CDC_Device_getchar_Blocking+0x28>
		  return _FDEV_EOF;

		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 c3c:	8c 85       	ldd	r24, Y+12	; 0x0c
 c3e:	9d 85       	ldd	r25, Y+13	; 0x0d
 c40:	dc df       	rcall	.-72     	; 0xbfa <CDC_Device_USBTask>
		USB_USBTask();
 c42:	45 df       	rcall	.-374    	; 0xace <USB_USBTask>

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
 c44:	8c 85       	ldd	r24, Y+12	; 0x0c
 c46:	9d 85       	ldd	r25, Y+13	; 0x0d
 c48:	56 df       	rcall	.-340    	; 0xaf6 <CDC_Device_ReceiveByte>
 c4a:	9c 01       	movw	r18, r24
 c4c:	97 fd       	sbrc	r25, 7
 c4e:	f0 cf       	rjmp	.-32     	; 0xc30 <CDC_Device_getchar_Blocking+0x8>
		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
		USB_USBTask();
	}

	return ReceivedByte;
}
 c50:	c9 01       	movw	r24, r18
 c52:	df 91       	pop	r29
 c54:	cf 91       	pop	r28
 c56:	08 95       	ret

00000c58 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 c58:	1f 93       	push	r17
 c5a:	fc 01       	movw	r30, r24
 c5c:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c5e:	8e b3       	in	r24, 0x1e	; 30
 c60:	84 30       	cpi	r24, 0x04	; 4
 c62:	e1 f4       	brne	.+56     	; 0xc9c <CDC_Device_SendByte+0x44>
 c64:	84 89       	ldd	r24, Z+20	; 0x14
 c66:	95 89       	ldd	r25, Z+21	; 0x15
 c68:	a6 89       	ldd	r26, Z+22	; 0x16
 c6a:	b7 89       	ldd	r27, Z+23	; 0x17
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	a1 05       	cpc	r26, r1
 c70:	b1 05       	cpc	r27, r1
 c72:	a1 f0       	breq	.+40     	; 0xc9c <CDC_Device_SendByte+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c74:	81 81       	ldd	r24, Z+1	; 0x01
 c76:	8f 70       	andi	r24, 0x0F	; 15
 c78:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c7c:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 c80:	85 fd       	sbrc	r24, 5
 c82:	08 c0       	rjmp	.+16     	; 0xc94 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c84:	80 91 e8 00 	lds	r24, 0x00E8
 c88:	8e 77       	andi	r24, 0x7E	; 126
 c8a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c8e:	6a dc       	rcall	.-1836   	; 0x564 <Endpoint_WaitUntilReady>
 c90:	88 23       	and	r24, r24
 c92:	29 f4       	brne	.+10     	; 0xc9e <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c94:	10 93 f1 00 	sts	0x00F1, r17
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	01 c0       	rjmp	.+2      	; 0xc9e <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 c9c:	82 e0       	ldi	r24, 0x02	; 2
}
 c9e:	1f 91       	pop	r17
 ca0:	08 95       	ret

00000ca2 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 ca2:	28 2f       	mov	r18, r24
 ca4:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 ca6:	84 85       	ldd	r24, Z+12	; 0x0c
 ca8:	95 85       	ldd	r25, Z+13	; 0x0d
 caa:	62 2f       	mov	r22, r18
 cac:	d5 df       	rcall	.-86     	; 0xc58 <CDC_Device_SendByte>
 cae:	88 23       	and	r24, r24
 cb0:	19 f4       	brne	.+6      	; 0xcb8 <CDC_Device_putchar+0x16>
 cb2:	20 e0       	ldi	r18, 0x00	; 0
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <CDC_Device_putchar+0x1a>
 cb8:	2f ef       	ldi	r18, 0xFF	; 255
 cba:	3f ef       	ldi	r19, 0xFF	; 255
}
 cbc:	c9 01       	movw	r24, r18
 cbe:	08 95       	ret

00000cc0 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 cc6:	40 96       	adiw	r24, 0x10	; 16
 cc8:	fc 01       	movw	r30, r24
 cca:	8b e0       	ldi	r24, 0x0B	; 11
 ccc:	df 01       	movw	r26, r30
 cce:	1d 92       	st	X+, r1
 cd0:	8a 95       	dec	r24
 cd2:	e9 f7       	brne	.-6      	; 0xcce <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 cd4:	82 e0       	ldi	r24, 0x02	; 2
 cd6:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 cd8:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 cda:	83 e0       	ldi	r24, 0x03	; 3
 cdc:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 cde:	ce 01       	movw	r24, r28
 ce0:	01 96       	adiw	r24, 0x01	; 1
 ce2:	61 e0       	ldi	r22, 0x01	; 1
 ce4:	e4 db       	rcall	.-2104   	; 0x4ae <Endpoint_ConfigureEndpointTable>
 ce6:	88 23       	and	r24, r24
 ce8:	71 f0       	breq	.+28     	; 0xd06 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cea:	ce 01       	movw	r24, r28
 cec:	06 96       	adiw	r24, 0x06	; 6
 cee:	61 e0       	ldi	r22, 0x01	; 1
 cf0:	de db       	rcall	.-2116   	; 0x4ae <Endpoint_ConfigureEndpointTable>
 cf2:	88 23       	and	r24, r24
 cf4:	41 f0       	breq	.+16     	; 0xd06 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 cf6:	ce 01       	movw	r24, r28
 cf8:	0b 96       	adiw	r24, 0x0b	; 11
 cfa:	61 e0       	ldi	r22, 0x01	; 1
 cfc:	d8 db       	rcall	.-2128   	; 0x4ae <Endpoint_ConfigureEndpointTable>
 cfe:	88 23       	and	r24, r24
 d00:	19 f0       	breq	.+6      	; 0xd08 <CDC_Device_ConfigureEndpoints+0x48>
 d02:	81 e0       	ldi	r24, 0x01	; 1
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <CDC_Device_ConfigureEndpoints+0x48>
 d06:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	08 95       	ret

00000d0e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d14:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 d18:	83 ff       	sbrs	r24, 3
 d1a:	a2 c0       	rjmp	.+324    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d1c:	88 81       	ld	r24, Y
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	20 91 36 01 	lds	r18, 0x0136
 d24:	30 91 37 01 	lds	r19, 0x0137
 d28:	28 17       	cp	r18, r24
 d2a:	39 07       	cpc	r19, r25
 d2c:	09 f0       	breq	.+2      	; 0xd30 <CDC_Device_ProcessControlRequest+0x22>
 d2e:	98 c0       	rjmp	.+304    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
 d30:	80 91 33 01 	lds	r24, 0x0133
 d34:	81 32       	cpi	r24, 0x21	; 33
 d36:	69 f0       	breq	.+26     	; 0xd52 <CDC_Device_ProcessControlRequest+0x44>
 d38:	82 32       	cpi	r24, 0x22	; 34
 d3a:	20 f4       	brcc	.+8      	; 0xd44 <CDC_Device_ProcessControlRequest+0x36>
 d3c:	80 32       	cpi	r24, 0x20	; 32
 d3e:	09 f0       	breq	.+2      	; 0xd42 <CDC_Device_ProcessControlRequest+0x34>
 d40:	8f c0       	rjmp	.+286    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
 d42:	3c c0       	rjmp	.+120    	; 0xdbc <CDC_Device_ProcessControlRequest+0xae>
 d44:	82 32       	cpi	r24, 0x22	; 34
 d46:	09 f4       	brne	.+2      	; 0xd4a <CDC_Device_ProcessControlRequest+0x3c>
 d48:	6a c0       	rjmp	.+212    	; 0xe1e <CDC_Device_ProcessControlRequest+0x110>
 d4a:	83 32       	cpi	r24, 0x23	; 35
 d4c:	09 f0       	breq	.+2      	; 0xd50 <CDC_Device_ProcessControlRequest+0x42>
 d4e:	88 c0       	rjmp	.+272    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
 d50:	79 c0       	rjmp	.+242    	; 0xe44 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d52:	80 91 32 01 	lds	r24, 0x0132
 d56:	81 3a       	cpi	r24, 0xA1	; 161
 d58:	09 f0       	breq	.+2      	; 0xd5c <CDC_Device_ProcessControlRequest+0x4e>
 d5a:	82 c0       	rjmp	.+260    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d5c:	80 91 e8 00 	lds	r24, 0x00E8
 d60:	87 7f       	andi	r24, 0xF7	; 247
 d62:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d66:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 d6a:	80 ff       	sbrs	r24, 0
 d6c:	fc cf       	rjmp	.-8      	; 0xd66 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 d6e:	8c 89       	ldd	r24, Y+20	; 0x14
 d70:	9d 89       	ldd	r25, Y+21	; 0x15
 d72:	ae 89       	ldd	r26, Y+22	; 0x16
 d74:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 d76:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 d7a:	29 2f       	mov	r18, r25
 d7c:	3a 2f       	mov	r19, r26
 d7e:	4b 2f       	mov	r20, r27
 d80:	55 27       	eor	r21, r21
 d82:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
 d86:	9d 01       	movw	r18, r26
 d88:	44 27       	eor	r20, r20
 d8a:	55 27       	eor	r21, r21
 d8c:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
 d90:	8b 2f       	mov	r24, r27
 d92:	99 27       	eor	r25, r25
 d94:	aa 27       	eor	r26, r26
 d96:	bb 27       	eor	r27, r27
 d98:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 d9c:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d9e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 da2:	89 8d       	ldd	r24, Y+25	; 0x19
 da4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 da8:	8a 8d       	ldd	r24, Y+26	; 0x1a
 daa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dae:	80 91 e8 00 	lds	r24, 0x00E8
 db2:	8e 77       	andi	r24, 0x7E	; 126
 db4:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 db8:	b6 db       	rcall	.-2196   	; 0x526 <Endpoint_ClearStatusStage>
 dba:	52 c0       	rjmp	.+164    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dbc:	80 91 32 01 	lds	r24, 0x0132
 dc0:	81 32       	cpi	r24, 0x21	; 33
 dc2:	09 f0       	breq	.+2      	; 0xdc6 <CDC_Device_ProcessControlRequest+0xb8>
 dc4:	4d c0       	rjmp	.+154    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc6:	80 91 e8 00 	lds	r24, 0x00E8
 dca:	87 7f       	andi	r24, 0xF7	; 247
 dcc:	80 93 e8 00 	sts	0x00E8, r24
 dd0:	04 c0       	rjmp	.+8      	; 0xdda <CDC_Device_ProcessControlRequest+0xcc>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 dd2:	8e b3       	in	r24, 0x1e	; 30
 dd4:	88 23       	and	r24, r24
 dd6:	09 f4       	brne	.+2      	; 0xdda <CDC_Device_ProcessControlRequest+0xcc>
 dd8:	43 c0       	rjmp	.+134    	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 dda:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 dde:	82 ff       	sbrs	r24, 2
 de0:	f8 cf       	rjmp	.-16     	; 0xdd2 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 de2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 de6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 dea:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
 dee:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 df2:	8c 8b       	std	Y+20, r24	; 0x14
 df4:	9d 8b       	std	Y+21, r25	; 0x15
 df6:	2e 8b       	std	Y+22, r18	; 0x16
 df8:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 dfa:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 dfe:	88 8f       	std	Y+24, r24	; 0x18
 e00:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 e04:	89 8f       	std	Y+25, r24	; 0x19
 e06:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 e0a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e0c:	80 91 e8 00 	lds	r24, 0x00E8
 e10:	8b 77       	andi	r24, 0x7B	; 123
 e12:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 e16:	87 db       	rcall	.-2290   	; 0x526 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e18:	ce 01       	movw	r24, r28
 e1a:	bb de       	rcall	.-650    	; 0xb92 <CDC_Device_Event_Stub>
 e1c:	21 c0       	rjmp	.+66     	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e1e:	80 91 32 01 	lds	r24, 0x0132
 e22:	81 32       	cpi	r24, 0x21	; 33
 e24:	e9 f4       	brne	.+58     	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e26:	80 91 e8 00 	lds	r24, 0x00E8
 e2a:	87 7f       	andi	r24, 0xF7	; 247
 e2c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e30:	7a db       	rcall	.-2316   	; 0x526 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 e32:	80 91 34 01 	lds	r24, 0x0134
 e36:	90 91 35 01 	lds	r25, 0x0135
 e3a:	99 8b       	std	Y+17, r25	; 0x11
 e3c:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e3e:	ce 01       	movw	r24, r28
 e40:	a8 de       	rcall	.-688    	; 0xb92 <CDC_Device_Event_Stub>
 e42:	0e c0       	rjmp	.+28     	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e44:	80 91 32 01 	lds	r24, 0x0132
 e48:	81 32       	cpi	r24, 0x21	; 33
 e4a:	51 f4       	brne	.+20     	; 0xe60 <CDC_Device_ProcessControlRequest+0x152>
 e4c:	80 91 e8 00 	lds	r24, 0x00E8
 e50:	87 7f       	andi	r24, 0xF7	; 247
 e52:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e56:	67 db       	rcall	.-2354   	; 0x526 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e58:	ce 01       	movw	r24, r28
 e5a:	60 91 34 01 	lds	r22, 0x0134
 e5e:	99 de       	rcall	.-718    	; 0xb92 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 e60:	df 91       	pop	r29
 e62:	cf 91       	pop	r28
 e64:	08 95       	ret

00000e66 <fgetc>:
 e66:	cf 93       	push	r28
 e68:	df 93       	push	r29
 e6a:	ec 01       	movw	r28, r24
 e6c:	4b 81       	ldd	r20, Y+3	; 0x03
 e6e:	40 ff       	sbrs	r20, 0
 e70:	1a c0       	rjmp	.+52     	; 0xea6 <fgetc+0x40>
 e72:	46 ff       	sbrs	r20, 6
 e74:	0a c0       	rjmp	.+20     	; 0xe8a <fgetc+0x24>
 e76:	4f 7b       	andi	r20, 0xBF	; 191
 e78:	4b 83       	std	Y+3, r20	; 0x03
 e7a:	8e 81       	ldd	r24, Y+6	; 0x06
 e7c:	9f 81       	ldd	r25, Y+7	; 0x07
 e7e:	01 96       	adiw	r24, 0x01	; 1
 e80:	9f 83       	std	Y+7, r25	; 0x07
 e82:	8e 83       	std	Y+6, r24	; 0x06
 e84:	8a 81       	ldd	r24, Y+2	; 0x02
 e86:	28 2f       	mov	r18, r24
 e88:	2b c0       	rjmp	.+86     	; 0xee0 <fgetc+0x7a>
 e8a:	42 ff       	sbrs	r20, 2
 e8c:	13 c0       	rjmp	.+38     	; 0xeb4 <fgetc+0x4e>
 e8e:	e8 81       	ld	r30, Y
 e90:	f9 81       	ldd	r31, Y+1	; 0x01
 e92:	80 81       	ld	r24, Z
 e94:	28 2f       	mov	r18, r24
 e96:	33 27       	eor	r19, r19
 e98:	27 fd       	sbrc	r18, 7
 e9a:	30 95       	com	r19
 e9c:	21 15       	cp	r18, r1
 e9e:	31 05       	cpc	r19, r1
 ea0:	29 f4       	brne	.+10     	; 0xeac <fgetc+0x46>
 ea2:	40 62       	ori	r20, 0x20	; 32
 ea4:	4b 83       	std	Y+3, r20	; 0x03
 ea6:	2f ef       	ldi	r18, 0xFF	; 255
 ea8:	3f ef       	ldi	r19, 0xFF	; 255
 eaa:	1b c0       	rjmp	.+54     	; 0xee2 <fgetc+0x7c>
 eac:	31 96       	adiw	r30, 0x01	; 1
 eae:	f9 83       	std	Y+1, r31	; 0x01
 eb0:	e8 83       	st	Y, r30
 eb2:	11 c0       	rjmp	.+34     	; 0xed6 <fgetc+0x70>
 eb4:	ea 85       	ldd	r30, Y+10	; 0x0a
 eb6:	fb 85       	ldd	r31, Y+11	; 0x0b
 eb8:	ce 01       	movw	r24, r28
 eba:	09 95       	icall
 ebc:	9c 01       	movw	r18, r24
 ebe:	97 ff       	sbrs	r25, 7
 ec0:	0a c0       	rjmp	.+20     	; 0xed6 <fgetc+0x70>
 ec2:	9b 81       	ldd	r25, Y+3	; 0x03
 ec4:	2f 5f       	subi	r18, 0xFF	; 255
 ec6:	3f 4f       	sbci	r19, 0xFF	; 255
 ec8:	11 f0       	breq	.+4      	; 0xece <fgetc+0x68>
 eca:	80 e2       	ldi	r24, 0x20	; 32
 ecc:	01 c0       	rjmp	.+2      	; 0xed0 <fgetc+0x6a>
 ece:	80 e1       	ldi	r24, 0x10	; 16
 ed0:	89 2b       	or	r24, r25
 ed2:	8b 83       	std	Y+3, r24	; 0x03
 ed4:	e8 cf       	rjmp	.-48     	; 0xea6 <fgetc+0x40>
 ed6:	8e 81       	ldd	r24, Y+6	; 0x06
 ed8:	9f 81       	ldd	r25, Y+7	; 0x07
 eda:	01 96       	adiw	r24, 0x01	; 1
 edc:	9f 83       	std	Y+7, r25	; 0x07
 ede:	8e 83       	std	Y+6, r24	; 0x06
 ee0:	30 e0       	ldi	r19, 0x00	; 0
 ee2:	c9 01       	movw	r24, r18
 ee4:	df 91       	pop	r29
 ee6:	cf 91       	pop	r28
 ee8:	08 95       	ret

00000eea <_exit>:
 eea:	f8 94       	cli

00000eec <__stop_program>:
 eec:	ff cf       	rjmp	.-2      	; 0xeec <__stop_program>
